/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";

// Create Virtual Routes

const RegisterLazyImport = createFileRoute("/register")();
const LoginLazyImport = createFileRoute("/login")();
const ListLazyImport = createFileRoute("/list")();
const IndexLazyImport = createFileRoute("/")();

// Create/Update Routes

const RegisterLazyRoute = RegisterLazyImport.update({
  id: "/register",
  path: "/register",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/register.lazy").then((d) => d.Route));

const LoginLazyRoute = LoginLazyImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/login.lazy").then((d) => d.Route));

const ListLazyRoute = ListLazyImport.update({
  id: "/list",
  path: "/list",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/list.lazy").then((d) => d.Route));

const IndexLazyRoute = IndexLazyImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/index.lazy").then((d) => d.Route));

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/list": {
      id: "/list";
      path: "/list";
      fullPath: "/list";
      preLoaderRoute: typeof ListLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/login": {
      id: "/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof LoginLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/register": {
      id: "/register";
      path: "/register";
      fullPath: "/register";
      preLoaderRoute: typeof RegisterLazyImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexLazyRoute;
  "/list": typeof ListLazyRoute;
  "/login": typeof LoginLazyRoute;
  "/register": typeof RegisterLazyRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexLazyRoute;
  "/list": typeof ListLazyRoute;
  "/login": typeof LoginLazyRoute;
  "/register": typeof RegisterLazyRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexLazyRoute;
  "/list": typeof ListLazyRoute;
  "/login": typeof LoginLazyRoute;
  "/register": typeof RegisterLazyRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/list" | "/login" | "/register";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/list" | "/login" | "/register";
  id: "__root__" | "/" | "/list" | "/login" | "/register";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute;
  ListLazyRoute: typeof ListLazyRoute;
  LoginLazyRoute: typeof LoginLazyRoute;
  RegisterLazyRoute: typeof RegisterLazyRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ListLazyRoute: ListLazyRoute,
  LoginLazyRoute: LoginLazyRoute,
  RegisterLazyRoute: RegisterLazyRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/list",
        "/login",
        "/register"
      ]
    },
    "/": {
      "filePath": "index.lazy.jsx"
    },
    "/list": {
      "filePath": "list.lazy.tsx"
    },
    "/login": {
      "filePath": "login.lazy.tsx"
    },
    "/register": {
      "filePath": "register.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
